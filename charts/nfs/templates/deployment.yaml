{{ include "common.pods.Deployment" (list . "nfs.Deployment") }}

{{- define "nfs.Deployment" -}}
spec:
  template:
    spec:
      containers:
        - name: nfs-server
          image: erichough/nfs-server
          securityContext:
            capabilities:
              add:
                - SYS_ADMIN # Needed or it won't run, needs to mount some sort of filesystems from within the container
          # Image supports other versions of NFS, but forcing the latest stable version is a good idea
          ports:
            - name: nfsv4
              containerPort: 2049
          volumeMounts:
            # Mounts the ConfigMap that specifies which directories to export
            - name: exports
              mountPath: /etc/exports
              readOnly: true # Doesn't have to be, but could potentially mitigate an attack vector
            # Bind mount to a local directory where files will be stored on disk
            - name: local
              mountPath: {{ tpl .Values.nfs.volume.mountPath . }}
              readOnly: false
              
        # Creates PVs for each PVC that mounts a subdirectory from the NFS export
        # Automatically creates the subdirectory on the NFS server if it does not already exist
        - name: nfs-provisioner
          image: registry.k8s.io/sig-storage/nfs-subdir-external-provisioner:v4.0.2
          # As the Pod is already pinned to a specific node anyway, might as well use a local mount for the provisioner instead of NFS
          volumeMounts:
            - name: local
              mountPath: /persistentvolumes # New PVC subdirectories will be created here
          env:
            - name: PROVISIONER_NAME
              value: {{ include "common.name" . }}
            # The hostname/IP address that will be given to any PVCs that are provisioned
            - name: NFS_SERVER
              value: {{ include "common.name" . }}.{{ include "common.namespace" . }} # DNS name of Service 
            # The mounting path for the NFS server, given with NFS_SERVER to complete a full mount URL
            - name: NFS_PATH
              value: {{ tpl .Values.nfs.volume.mountPath . }}
      
      volumes:
        # Mount ConfigMap with exports.txt configuration
        - name: exports
          configMap:
            name: {{ tpl .Values.nfs.configMap.name . }}
            namespace: {{ tpl .Values.nfs.configMap.namespace . }}
            items:
              - key: {{ tpl .Values.nfs.configMap.key . }}
                path: exports.txt
        # PersistentVolume mapping a local directory from one node to the NFS server
        - name: local
          persistentVolumeClaim:
            claimName: {{ include "common.name" . }}
            readOnly: false
{{- end -}}